# streamlit_final_boss_app.py

import streamlit as st
import google.generativeai as genai

# ==============================================================================
# --- ‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ API Key ‡πÅ‡∏•‡∏∞‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö ---
# ==============================================================================
st.set_page_config(page_title="Final Boss SEO Writer", page_icon="üëë", layout="wide")

# ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ API Key
try:
    GEMINI_API_KEY = st.secrets["GEMINI_API_KEY"]
    genai.configure(api_key=GEMINI_API_KEY)
except (KeyError, FileNotFoundError):
    st.warning("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö API Key ‡πÉ‡∏ô Secrets")
    GEMINI_API_KEY = st.text_input("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà Google AI API Key ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì:", type="password")
    if GEMINI_API_KEY:
        genai.configure(api_key=GEMINI_API_KEY)

# ==============================================================================
# --- ‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡∏≤‡∏Ç‡∏≠‡∏á‡πÅ‡∏≠‡∏õ‡∏û‡∏•‡∏¥‡πÄ‡∏Ñ‡∏ä‡∏±‡∏ô ---
# ==============================================================================
st.title("üëë Final Boss: SEO Publishing Kit Generator")
st.markdown("‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏°‡∏∑‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á '‡∏ä‡∏∏‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏ú‡∏¢‡πÅ‡∏û‡∏£‡πà' ‡∏ó‡∏µ‡πà‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå‡πÅ‡∏ö‡∏ö‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Yoast SEO")

with st.form("final_boss_form"):
    st.header("Phase 1: Strategic Input (‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ä‡∏¥‡∏á‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå‡∏à‡∏≤‡∏Å‡∏Ñ‡∏∏‡∏ì)")
    
    col1, col2 = st.columns(2)
    with col1:
        topic_input = st.text_input("‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡∏ö‡∏ó‡∏Ñ‡∏ß‡∏≤‡∏° (Topic)", placeholder="‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏Ñ‡∏≤‡∏£‡πå‡∏ã‡∏µ‡∏ó All-in-One")
        keyphrase_input = st.text_input("‡∏Ñ‡∏µ‡∏¢‡πå‡πÄ‡∏ß‡∏¥‡∏£‡πå‡∏î‡∏´‡∏•‡∏±‡∏Å‡∏ï‡∏£‡∏á‡∏ï‡∏±‡∏ß (Exact Focus Keyphrase)", placeholder="‡∏Ñ‡∏≤‡∏£‡πå‡∏ã‡∏µ‡∏ó‡πÄ‡∏î‡πá‡∏Å‡πÅ‡∏£‡∏Å‡πÄ‡∏Å‡∏¥‡∏î")
        word_count_input = st.number_input("‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ (‡∏Ñ‡∏≥)", min_value=300, value=1000, step=100)

    with col2:
        author_persona = st.text_input("‡∏™‡∏ß‡∏°‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó‡πÄ‡∏õ‡πá‡∏ô‡πÉ‡∏Ñ‡∏£ (Author Persona)", placeholder="‡∏ú‡∏π‡πâ‡πÄ‡∏ä‡∏µ‡πà‡∏¢‡∏ß‡∏ä‡∏≤‡∏ç‡∏î‡πâ‡∏≤‡∏ô‡∏ú‡∏•‡∏¥‡∏ï‡∏†‡∏±‡∏ì‡∏ë‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏î‡πá‡∏Å")
        target_audience = st.text_input("‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÉ‡∏´‡πâ‡πÉ‡∏Ñ‡∏£‡∏≠‡πà‡∏≤‡∏ô (Target Audience)", placeholder="‡∏Ñ‡∏∏‡∏ì‡∏û‡πà‡∏≠‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏°‡πà‡∏°‡∏∑‡∏≠‡πÉ‡∏´‡∏°‡πà")
        internal_link_ideas = st.text_area("‡πÑ‡∏≠‡πÄ‡∏î‡∏µ‡∏¢‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏†‡∏≤‡∏¢‡πÉ‡∏ô (Internal Links)", placeholder="‡πÄ‡∏ä‡πà‡∏ô: ‡∏ö‡∏ó‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á '‡∏ß‡∏¥‡∏ò‡∏µ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡∏≤‡∏£‡πå‡∏ã‡∏µ‡∏ó‡πÉ‡∏´‡πâ‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢', '‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡∏Ñ‡∏≤‡∏£‡πå‡∏ã‡∏µ‡∏ó 5 ‡∏£‡∏∏‡πà‡∏ô‡∏¢‡∏≠‡∏î‡∏ô‡∏¥‡∏¢‡∏°'")

    submitted = st.form_submit_button("üëë ‡∏™‡∏£‡πâ‡∏≤‡∏á Publishing Kit!")

# ==============================================================================
# --- ‡∏™‡πà‡∏ß‡∏ô‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏• ---
# ==============================================================================
if submitted:
    if not all([GEMINI_API_KEY, topic_input, keyphrase_input, author_persona]):
        st.warning("‚ö†Ô∏è ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏ä‡πà‡∏≠‡∏á '‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠', '‡∏Ñ‡∏µ‡∏¢‡πå‡πÄ‡∏ß‡∏¥‡∏£‡πå‡∏î' ‡πÅ‡∏•‡∏∞ '‡∏™‡∏ß‡∏°‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó‡πÄ‡∏õ‡πá‡∏ô‡πÉ‡∏Ñ‡∏£' ‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô")
    else:
        with st.spinner(f"AI Co-Editor ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏£‡πà‡∏≤‡∏á Publishing Kit..."):
            try:
                model = genai.GenerativeModel('gemini-1.5-flash')
                
                final_boss_prompt = f"""
                Act as a world-class SEO Content Strategist and Editor. Your task is to generate a complete "Publishing Kit" for a single web page based on the provided strategic inputs. You must strictly adhere to all Yoast SEO Premium rules and E-E-A-T principles.

                **STRATEGIC INPUTS:**
                - **Topic:** {topic_input}
                - **Exact Focus Keyphrase:** "{keyphrase_input}"
                - **Author Persona:** "{author_persona}"
                - **Target Audience:** "{target_audience}"
                - **Target Word Count:** Approximately {word_count_input} words.
                - **Internal Link Context:** The website has existing articles about: "{internal_link_ideas}".

                **TASK: Generate the following elements in the specified XML-like format.**

                <publishing_kit>

                <metadata>
                    <seo_title>Generate an SEO Title. It MUST start with the exact keyphrase "{keyphrase_input}". Total length must be 55-60 characters.</seo_title>
                    <meta_description>Generate a Meta Description. It MUST contain the exact keyphrase "{keyphrase_input}". Total length MUST be between 140 and 156 characters.</meta_description>
                    <url_slug>Generate a URL-friendly slug containing the keyphrase "{keyphrase_input}". Use lowercase English words separated by hyphens.</url_slug>
                </metadata>

                <content_body>
                    <article>
                    Write a comprehensive article based on the strategic inputs.
                    **Strict Rules:**
                    1.  **Length:** Must be at least {max(300, word_count_input)} words.
                    2.  **E-E-A-T:** Write from the perspective of the "{author_persona}" for the "{target_audience}", demonstrating clear Experience, Expertise, Authoritativeness, and Trust.
                    3.  **Keyphrase in Introduction:** The exact keyphrase "{keyphrase_input}" MUST appear naturally within the first paragraph.
                    4.  **Keyphrase Density/Distribution:** The exact keyphrase "{keyphrase_input}" MUST appear 3-6 times, distributed evenly across the introduction, body, and conclusion.
                    5.  **Keyphrase in Subheadings:** The exact keyphrase "{keyphrase_input}" or a very close synonym MUST appear in at least two H2 or H3 subheadings.
                    6.  **Internal Links:** Naturally integrate 1-2 internal links to the topics mentioned in the Internal Link Context. Use the format `[[anchor text|INTERNAL SUGGESTION: Link to the article about...]]`.
                    7.  **Outbound Links:** Naturally integrate 1-2 outbound links to high-authority, non-commercial sources (like Wikipedia, research institutions, or government sites). Use the format `[[anchor text|OUTBOUND SUGGESTION: Link to a reputable source about...]]`.
                    </article>
                </content_body>

                <asset_checklist>
                    <image_suggestions>
                        <image>
                            <description>Suggest a relevant, high-quality image for the article.</description>
                            <alt_text>Write a descriptive alt text for this image that includes the exact keyphrase "{keyphrase_input}".</alt_text>
                        </image>
                        <image>
                            <description>Suggest a second, different type of image (e.g., an infographic, a comparison table).</description>
                            <alt_text>Write a descriptive alt text for this second image that includes a synonym or variation of the keyphrase "{keyphrase_input}".</alt_text>
                        </image>
                    </image_suggestions>
                </asset_checklist>

                </publishing_kit>
                """

                response = model.generate_content(final_boss_prompt)
                full_text = response.text
                
                # ‡πÉ‡∏ä‡πâ Regular Expression ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡πÅ‡∏ó‡πá‡∏Å XML
                def extract_tag(tag, text):
                    match = re.search(f'<{tag}>(.*?)</{tag}>', text, re.DOTALL)
                    return match.group(1).strip() if match else f"[{tag} not found]"

                title = extract_tag('seo_title', full_text)
                description = extract_tag('meta_description', full_text)
                slug = extract_tag('url_slug', full_text)
                article = extract_tag('article', full_text)
                images = extract_tag('image_suggestions', full_text)


                st.success("üéâ Publishing Kit ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß!")
                
                # ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
                st.subheader("Phase 2: AI Generated Publishing Kit")
                st.markdown("‡∏ô‡∏≥‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ä‡∏∏‡∏î‡∏ô‡∏µ‡πâ‡πÑ‡∏õ‡πÉ‡∏ä‡πâ‡πÉ‡∏ô WordPress ‡∏´‡∏£‡∏∑‡∏≠ CMS ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì")
                
                with st.container(border=True):
                    st.markdown("#### **Metadata**")
                    st.text_input("SEO Title", value=title)
                    st.text_area("Meta Description", value=description, height=100)
                    st.text_input("URL Slug", value=slug)

                with st.container(border=True):
                    st.markdown("#### **Content Body**")
                    st.markdown(article)
                    st.info("üí° **‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥:** ‡∏°‡∏≠‡∏á‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏ô‡∏ß‡∏á‡πÄ‡∏•‡πá‡∏ö `[[...]]` ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏™‡πà‡∏•‡∏¥‡∏á‡∏Å‡πå Internal/Outbound")

                with st.container(border=True):
                    st.markdown("#### **Asset Checklist (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û)**")
                    st.text_area("Image & Alt Text Suggestions", value=images, height=200)

            except Exception as e:
                st.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")
                st.text(full_text) # ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏î‡∏¥‡∏ö‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏µ‡∏ö‡∏±‡∏Å